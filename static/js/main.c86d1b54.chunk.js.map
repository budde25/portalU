{"version":3,"sources":["components/Page.tsx","components/Rss.tsx","components/Tile.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["PageType","Rss","cardTitle","this","props","title","Card","className","Header","Component","App","card","link","Img","src","Footer","href","Parser","require","PageItem","type","Page","state","itemList","count","page","renderPage","Tiles","renderTiles","RSS","renderRSS","cards","data","filter","toLowerCase","search","searchText","includes","map","createTile","key","parser","a","parseURL","CORS_PROXY","feed","console","log","items","forEach","item","setState","concat","menu","options","isAuthenticated","selectedPage","handleSearchChange","bind","routes","defineRoutes","appbar","exact","path","component","Settings","AdminSettings","NotFound","name","render","home","listItems","listAppbarMenu","Navbar","bg","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","Form","inline","InputGroup","Prepend","Text","width","height","viewBox","fill","xmlns","fillRule","d","FormControl","placeholder","value","onChange","Dropdown","as","NavItem","alignRight","NavLink","Menu","Item","Divider","NavDropdown","event","target","Link","onClick","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c86d1b54.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Rss from './Rss'\nimport Tile from './Tile'\nimport '../styles/Page.css'\nimport data from '../config/cards.json'\nlet Parser = require('rss-parser');\n\nexport enum PageType {\n    Tiles,\n    RSS,\n}\n\nexport class PageItem {\n    title: string;\n    type: PageType;\n    constructor(title: string, type: PageType) {\n        this.title = title;\n        this.type = type;\n    }\n}\n\nexport class CardItem {\n    title: string;\n    link: string;\n    constructor(title: string, link: string) {\n        this.title = title;\n        this.link = link;\n    }\n}\n\ntype IProps = {\n    page: PageItem,\n    searchText: string,\n};\ntype IState = {\n    itemList: any[],\n    count: number\n};\n\nclass Page extends Component<IProps, IState>{\n    constructor(props: IProps) {\n        super(props);\n        this.state = ({\n            itemList: [],\n            count: 0\n        })\n\n    }\n\n    render() {\n        //const title = this.props.page.title;\n        const type = this.props.page.type;\n\n        return (\n            <div className='page'>\n                {this.renderPage(type)}\n            </div>\n        );\n    }\n\n    renderPage(type: PageType) {\n        if (type === PageType.Tiles) {\n            return this.renderTiles();\n        } else if (type === PageType.RSS) {\n            return this.renderRSS()\n        }\n    }\n\n    renderTiles() {\n        const cardsInSearch = data.filter((card: CardItem) => {\n            const title = card.title.toLowerCase()\n            const search = this.props.searchText.toLowerCase()\n            return title.includes(search)   \n        })\n\n        const cards = cardsInSearch.map((card: CardItem) => this.createTile(card))\n        return(\n            <ul className=\"list-group list-group-horizontal align-items-stretch flex-wrap\">\n                {cards}\n            </ul>\n        )\n    }\n\n    createTile(card: CardItem) {\n        return (\n            <div key={card.title}>\n                <Tile card={card} key={card.title} />\n            </div>\n        )\n    }\n\n    renderRSS() {\n        const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\"\n        let parser = new Parser();\n        let itemList: any[] = [];\n\n        (async () => {\n            let feed = await parser.parseURL(CORS_PROXY + 'https://www.reddit.com/.rss');\n            console.log(feed.title);\n            feed.items.forEach((item: any) => {\n                if (this.state.count < 25) {\n                    this.setState({\n                        itemList: itemList.concat(item),\n                        count: this.state.count + 1\n                    })\n                }\n            });\n        })();\n        const cards = itemList.map((item: any) => this.createTile(item))\n        return(\n            <div>\n                {cards}\n            </div>\n        )\n    }\n\n    createRss(item: any) {\n        console.log(item.title)\n        return (\n            <div key={item.title}>\n                <Rss title={item.title} />\n            </div>\n        )\n    }\n}\n\nexport default Page;","import React, { Component } from \"react\";\nimport Card from 'react-bootstrap/Card'\nimport '../styles/Rss.css'\n\ntype IProps = {\n    title: string\n};\ntype IState = {};\n\nexport default class Rss extends Component<IProps, IState> {\n    render() {\n        const cardTitle = this.props.title;\n        return(\n            <Card className=\"mb-4\">\n                <Card.Header className=\"title\">{cardTitle}</Card.Header>\n            </Card>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport Card from 'react-bootstrap/Card'\nimport { CardItem } from \"./Page\";\nimport '../styles/Tile.css'\n\ntype IProps = {\n    card: CardItem\n};\ntype IState = {};\n\nexport default class App extends Component<IProps, IState> {\n    render() {\n        const title = this.props.card.title;\n        const link = this.props.card.link;\n        return(\n            <li className=\"list-group-item border-0\">\n            <Card className=\"mb-4\">\n                <Card.Header className=\"title\">{title}</Card.Header>\n                <Card.Img className=\"img-fluid\" src=\"//placehold.it/500x280\">\n                </Card.Img>\n                <Card.Footer>\n                    <a href={link}>Launch</a>\n                </Card.Footer>\n            </Card>\n            </li>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Page, { PageType, PageItem } from \"./Page\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport NavItem from 'react-bootstrap/NavItem'\nimport NavLink from 'react-bootstrap/NavLink'\nimport FormControl from 'react-bootstrap/FormControl';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\"\nimport '../styles/App.css'\n\ntype IProps = {};\ntype IState = {\n    menu: PageItem[],\n    isAuthenticated: boolean,\n    selectedPage: PageItem,\n    searchText: string,\n};\n\nexport default class App extends Component<IProps, IState> {\n    static options = [new PageItem('Apps', PageType.Tiles), new PageItem('Announcements', PageType.RSS)]\n\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            menu: App.options,\n            isAuthenticated: true,\n            selectedPage: App.options[0],\n            searchText: '',\n        }\n        this.handleSearchChange = this.handleSearchChange.bind(this);\n    }\n\n    render() {\n        const titles: string[] = this.state.menu.map((page) => page.title);\n        const routes = titles.map((title: string) => this.defineRoutes(title))\n        return (\n            <Router>\n                {this.appbar()}\n                <Switch>\n                    <Route exact path='/'></Route>\n                    <Route path='/settings' component={Settings}></Route>\n                    <Route path='/admin-settings' component={AdminSettings}></Route>\n                    {routes}\n                    <Route component={NotFound} />\n                </Switch>\n            </Router>\n        );\n    }\n\n    defineRoutes(title: string) {\n        const name: string = '/' + title.toLowerCase()\n        return (\n            <Route key={title}\n                path={name} \n                render={(props) => (\n                    <Page {...props} page={this.state.selectedPage} searchText={this.state.searchText} />\n                )}\n            />\n        );\n    }\n\n\n    /**\n     * App bar code\n     */\n    appbar() {\n        const home: string = '/' + this.state.selectedPage.title.toLowerCase()\n        const listItems =  this.state.menu.map((page: PageItem) => this.listAppbarMenu(page))\n        return (\n            <div className=\"Appbar\">\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand>\n                        <Link className='text-link' to={home}>Portal-App</Link>\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            {listItems}\n                        </Nav>\n                        <Form inline>\n                            <InputGroup>\n                            <InputGroup.Prepend>\n                                    <InputGroup.Text>\n                                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                            <path fillRule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"/>\n                                            <path fillRule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"/>\n                                        </svg>\n                                    </InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl \n                                    type=\"text\" \n                                    placeholder=\"Search\" \n                                    className=\"mr-sm-2\" \n                                    value={this.state.searchText} \n                                    onChange={this.handleSearchChange} \n                                />\n                            </InputGroup>\n                        </Form>\n                        <Nav>\n                            <Dropdown as={NavItem} alignRight={true}>\n                                <Dropdown.Toggle as={NavLink}>Settings</Dropdown.Toggle>\n                                <Dropdown.Menu>\n                                        <Dropdown.Item>\n                                            <Link className='text-link' to='/settings'>Settings</Link>\n                                        </Dropdown.Item>\n                                        <Dropdown.Item>\n                                            <Link className='text-link' to='/admin-settings'>Admin Settings</Link>\n                                        </Dropdown.Item>\n                                        <Dropdown.Divider/>\n                                        <NavDropdown.Item href=\"/logout\">Logout</NavDropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n\n    handleSearchChange(event: any) {\n        this.setState({searchText: event?.target?.value})\n    }\n\n    /**\n     * Appbar page helper\n     * @param page the page to put on the menu\n     */\n    listAppbarMenu(page: PageItem) {\n        const link: string = '/' + page.title.toLowerCase()\n        return(\n            <Nav.Link \n                key={page.title.toLowerCase()} \n                as={Link}\n                className='text-link' \n                to={link} \n                onClick={() => this.setState({\n                    selectedPage: page\n                })\n            }>{page.title}\n            </Nav.Link>\n        ); \n    }\n}\n\n\n/**\n * 404 page\n */\nfunction NotFound() {\n    return (\n        <div className='not-found'>\n            <h1>404</h1>\n            <h2>Page Not Found</h2>\n        </div>\n    )\n}\n\n\n// Todo settings page\nfunction Settings() {\n    return (\n        <h1>Settings</h1>\n    );\n}\n\n\n// Todo admin page\nfunction AdminSettings() {\n    return (\n        <h1>Admin Settings</h1>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}